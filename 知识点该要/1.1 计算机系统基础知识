# 计算机系统基础知识

<br />

# 计算机系统硬件基本组成
计算机系统的硬件基本组成包括以下五大部分
### 1. 运算器（Arithmetic and Logic Unit, ALU）
- 功能：执行各种算数运算（加、减、乘、除）与逻辑运算（与、或、非、异或等）。
- 通常包括：加法器、寄存器、逻辑运算单元、移位单元。
### 2. 控制器（Control Unit, CU）
- 功能：从存储器中取出指令并加以解释，控制其他各部件协同工作。
- 核心组成：指令寄存器（IR）、程序计数器（PC）、控制逻辑电路。
### 3. 存储器（Memory）
- 功能：存储程序和数据。
- 分类：
    - 主存储器（内存）：如RAM、ROM。
    - 辅助存储器（外存）：如硬盘、SSD、光盘等。
- 关键参数：存储容量、访问速度、地址编码方式。
### 4. 输入设备（Input Devices）
- 功能：将外部信息转换为计算机课识别的形式输入系统。
- 常见设备：键盘、鼠标、扫描仪、摄像头、传感器等。
### 5. 输出设备（Output Devices）
- 功能：将计算机处理结果以人类可理解形式输出。
- 常见设备：显示器、打印机、扬声器、控制执行器等。
### 附：总线系统（Bus）
- 虽非一个“部件”，但作为连接各硬件的通道至关重要。
- 三种基本类型：
    - 数据总线（Data Bus）：传输数据。
    - 地址总线（Address Bus）：传输地址信息。
    - 控制总线（Control BUS）：传输控制信号。

<br />

# 中央处理单元
中央处理单元（Central Processing Unit, CPU）是计算机的核心部件，主要由**运算器**和**控制器**组成，负责指令的解释与执行，是计算机的“控制中枢”和“计算核心”。
### 一、CPU的组成结构
#### 1. 运算器（ALU，Arithmetic and Logic Unit）
- 功能：执行各种算数与逻辑运算。
- 包括：
    - 算术运算部件（加法器等）
    - 逻辑运算部件（与、或、非等）
    - 累加器（Accumulator）：临时存储运算结果
    - 状态条件寄存器（Flags）：保存运算结果状态（如零、进位、溢出等）
#### 2. 控制器（CU，Control Unit）
- 功能：协调各部件工作流程，解释指令并发出控制信号。
- 主要部件：
    - 程序计数器（PC）：存放下一条要执行指令的地址
    - 指令寄存器（IR）：存放当前正在执行的指令
    - 控制逻辑电路：生成微操作控制信号
#### 3. 寄存器组（Registers）
- 高速存储单元，用于临时存储数据和指令。
- 类型：
    - 数据寄存器（如累加器）
    - 地址寄存器
    - 指令寄存器
    - 状态寄存器
    - 通用寄存器
### 二、CPU的工作过程（指令周期）
**1.取指（Fetch）** 从内存中取出下一条指令（由PC指示地址），放入IR。<br>
**2.译码（Decode）** 分析IR中的指令操作码，确定操作类型和操作数。<br>
**3.执行（Excute）** 控制器发出控制信号，由ALU执行运算或数据传送操作。<br>
**4.结果写回（Write-back）** 将运算结果写入寄存器或内存。
### 三、性能指标
- **主频（Clock Speed）** CPU每秒钟振荡次数，单位为GHz。
- **指令执行速度（MIPS）** 每秒钟的百万条指令数。
- **吞吐率（FLOPS）** 每秒浮点运算次数（用于科学计算）。
- **核数与线程数** 并行处理能力的体现。
### 四、现代CPU扩展功能
- **高速缓存（Cache）** 分为L1、L2、L3缓存，加快数据访问速度。
- **流水线技术（Pipelining）** 实现指令并行处理，提高指令吞吐率。
- **超标量结构（Superscaler）** 每个时钟周期执行多条指令。
- **多核处理（Multicore）** 集成多个处理核心，提高并行处理能力。
<br />

# 数据表示
数据表示是计算机中将各种类型信息（如数字、字符、图像、声音等）转换为**二进制形式**进行存储和处理的方法，属于计算机组成基础知识的关键部分。
### 一、数值数据表示
#### 1. 进位制
- **二进制（Binary）** 基数2，0和1两个数码，是计算机内部通用的表示方式。
- **十进制（Decimal）** 人类常用，基数10。
- **十六进制（Hexadecimal）** 基数16，用0-9和A-F表示，常用于简洁表达二进制。
#### 2. 无符号整数
- 范围： 0～2<sup>n</sup> - 1(n为位数) 
- 示例：8位无符号整数范围为0～255
#### 3. 有符号整数
- 通常使用**补码**表示，支持正负数。
- 表示范围：-2<sup>n-1</sup>～2<sup>n-1</sup>-1
- 例如：8位补码表示范围为-128～+128
#### 4. 补码（Two's Complement）
- 规则
    - 正数与原码相同
    负数：按位取反后 +1
- 补码使加减统一处理，并简化硬件设计
#### 5. 浮点数表示（IEEE 754标准）
- 表示格式：（-1）^s x 1.M x 2^(E-Bias)
- 单精度（32位）：1位符号 + 8位阶码 + 23位尾数
- 双精度（64位）：1位符号 + 11位阶码 + 52位尾数
- 特殊值：$ \pm 0 $、$ \pm ∞ $、NaN（非数）
### 二、字符数据表示
#### 1. ASCII（American Standard Code for Information INterchange）
- 用7位或8位表示一个字符
- 例如：'A'= 65（十进制） = 01000001(二进制)
#### 2. Unicode / UTF-8
- Unicode:统一全球字符集，采用多字节表示
- UTF-8：可变长编码方式，兼容ASCII，使用1-4字节表示字符
### 三、非数值数据表示
#### 1. 图像
- 位图（bitmap）：由像素组成，每个像素由RGB分量组成
- 色彩深度：常见如24位真彩色（8位R + 8位G + 8位B）
#### 2. 声音
- 数字化方式：采样 + 量化
- 参数：
    - 采样率（Hz）：每秒采样次数（如44.1kHz）
    - 采样精度（位数）：每个样本所占位数（如16位）
### 四、常用单位换算
单位 | 值 | 说明
:----------:|:-------------:|:-----------:
   1 Byte   |   8 bit       |    8位构成1字节
   1 KB     |   1024 B      |    千字节
   1 MB     |   1024 KB     |    兆字节
   1 GB     |   1024 MB     |    吉字节
   1 TB     |   1024 GB     |    太字节

<br />

# 校验码
### 一、常见校验码类型
#### 1. 奇偶校验吗（Parity Bit）
- 原理：增加1位校验位，使得整个数据中1的个数为偶数（偶校验）或奇数（奇校验）。
- 有点：简单，硬件实现方便
- 缺点：智能检验奇数位错误，无法纠错
#### 2. 海明吗（Hamming Code）
- 原理：在数据中插入多个校验位，能检测和纠正1位错误（单比特纠错）。
- 公式：设数据位为$m$， 校验位数为$r$，需满足：
$$ 2^r\geq m + r + 1 $$
- 功能：
    - 能检测2位错误
    - 能纠正1位错误
#### 3. 循环冗余校验码（CRC， Cyclic Redundancy Check）
- 原理：将数据视为多项式，对其除以一个预定多项式，余数作为CRC码。
- 用途广泛：网络传输、磁盘存储等
- 优点：检测能力强，能检测突发错误
#### 4. 校验和（Checksum）
- 原理：将所有数据按一定规则求和（可能取反），将结果附在数据后。
- 常见于：IP数据包、文件传输等
- 缺点：对某些特定错误（重排、对调）敏感性差
### 二、校验码作用总结
校验码类型 | 是否能纠错 | 能检测的错误类型 | 应用场景
:-------:|:---------:|:--------------:|:------:
奇偶校验 | 否        | 奇数个比特错误 | 简单通信接口
海明码 | 是（1位） | $\geq$ 2位错误 | 内存、低速通信
CRC | 否（本质）|多位、突发错误|网络、硬盘
校验和|否|一般错误|TCP/IP等









